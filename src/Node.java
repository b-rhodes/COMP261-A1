import java.awt.*;
import java.util.ArrayList;

/**
 * Nodes are intersections, or ends of roads, or points where two roads join.
 */
public class Node {

    // The ID of the node
    private int nodeID;
    // The location of the node
    private Location loc; // TODO: Might need to keep the latitude/longitude. Unsure.

    // The list of segments connected to this node
    private ArrayList<Segment> segmentList = new ArrayList<>();

    /**
     * Constructor
     * Create an instance of the Node class
     *
     * @param nodeID - The ID of the node
     * @param lat - The latitude of the node
     * @param lon - The longitude of the node
     */
    public Node(int nodeID, double lat, double lon) {
        this.nodeID = nodeID;
        this.loc = Location.newFromLatLon(lat, lon);
    }

    /**
     * Draws the segment. This will be called during the redraw() method in Main.java
     *
     * @param g - The graphics object
     * @param origin - The origin point of the map
     * @param scale - The current scale of the map
     */
    public void draw(Graphics g, Location origin, double scale) {
        Point p = loc.asPoint(origin, scale);
        g.setColor(Color.BLUE);

        g.fillRect(p.x, p.y, 5, 5);
    }


    //  ------------------------------------------------------------------------------------------------
    //  THE GETTERS AND SETTERS WERE AUTO GENERATED BY INTELLIJ, I HAVE ONLY ADDED THE METHOD COMMENTS.
    //  ------------------------------------------------------------------------------------------------

    /**
     * @return The ID of the node
     */
    public int getNodeID() {
        return nodeID;
    }

    /**
     * @return The location of the node
     */
    public Location getLoc() {
        return loc;
    }

    /**
     * @return The ArrayList containing the segments connected to this node
     */
    public ArrayList<Segment> getSegmentList() {
        return segmentList;
    }
}
