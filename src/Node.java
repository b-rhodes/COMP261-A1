import java.awt.*;
import java.util.ArrayList;

/**
 * Nodes are intersections, or ends of roads, or points where two roads join.
 */
public class Node {

    // The ID of the node
    private int nodeID;
    // The location of the node
    private Location loc;

    // Is the node highlighted
    private boolean highlight = false;

    // The list of segments connected to this node
    private ArrayList<Segment> segmentList = new ArrayList<>();

    /**
     * Constructor
     * Create an instance of the Node class
     *
     * @param nodeID - The ID of the node
     * @param lat - The latitude of the node
     * @param lon - The longitude of the node
     */
    public Node(int nodeID, double lat, double lon) {
        this.nodeID = nodeID;
        this.loc = Location.newFromLatLon(lat, lon);
    }

    /**
     * Draws the segment. This will be called during the redraw() method in Main.java
     *
     * @param g - The graphics object
     * @param origin - The origin point of the map
     * @param scale - The current scale of the map
     */
    public void draw(Graphics g, Location origin, double scale) {
        // Draw the Segments
        //segmentList.forEach(segment -> segment.draw(g, origin, scale));

        // Draw the node
        if(highlight) { // draw the node as yellow and print out the road names of its segments
            g.setColor(Color.RED);
        } else { // draw the node as usual
            g.setColor(Color.BLUE);
        }
        Point p = loc.asPoint(origin, scale);
        int size = 6;
        g.fillOval(p.x - size / 2, p.y - size / 2, size, size);
    }

    /**
     * @param other - The node we're finding the distance from
     * @param origin - The origin point of the map
     * @param scale - The current scale of the map
     * @return returns the distance from the other node
     */
    public double getDist(Point other, Location origin, double scale) {
        Point p = loc.asPoint(origin, scale);
        return Math.abs(p.x - other.x) + Math.abs(p.y - other.y);
    }

    /**
     * Toggle whether or not the node is highlighted
     */
    public void highlight() {
        highlight = !highlight;
    }


    //  ------------------------------------------------------------------------------------------------
    //  THE GETTERS AND SETTERS WERE AUTO GENERATED BY INTELLIJ, I HAVE ONLY ADDED THE METHOD COMMENTS.
    //  ------------------------------------------------------------------------------------------------

    /**
     * @return The ID of the node
     */
    public int getNodeID() {
        return nodeID;
    }

    /**
     * @return The location of the node
     */
    public Location getLoc() {
        return loc;
    }

    /**
     * @return The ArrayList containing the segments connected to this node
     */
    public ArrayList<Segment> getSegmentList() {
        return segmentList;
    }
}
