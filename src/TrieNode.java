import java.util.ArrayList;
import java.util.HashMap;

/**
 * This is an ordered tree, which indexes its nodes by the
 * order of their prefix. It is used to be able to search
 * up an object, and find it without looking through every
 * object which this contains.
 *
 * @param <T> - The class which is being indexed
 */
public class TrieNode<T> {

    // The children of this node
    private HashMap<Character, TrieNode<T>> children = new HashMap<Character, TrieNode<T>>();

    // The data held by the node (allows multiple of the same data.
    private ArrayList<T> data;

    // Whether or not this node actually holds data
    private boolean holdsData = false;

    // The prefix up until here (including this node)
    private String prefix;

    /**
     * Creates the node, data is not required,
     * although the alternate constructor allows for data to be entered at the same time
     *
     * @param prefix - The prefix up until here (including this node)
     */
    public TrieNode(String prefix) {
        this.prefix = prefix;
        this.data = new ArrayList<T>();
    }

    //  ------------------------------------------------------------------------------------------------
    //  THE GETTERS AND SETTERS WERE AUTO GENERATED BY INTELLIJ, I HAVE ONLY ADDED THE METHOD COMMENTS.
    //  ------------------------------------------------------------------------------------------------

    /**
     * @return The ArrayList containing the data
     */
    public ArrayList<T> getData() {
        return data;
    }

    /**
     * @return Whether or not the TrieNode contains data
     */
    public boolean isHoldsData() {
        return holdsData;
    }

    /**
     * @return The prefix of the TrieNode, including the character this node represents
     */
    public String getPrefix() {
        return prefix;
    }

    /**
     * @return The Children of the TrieNode
     */
    public HashMap<Character, TrieNode<T>> getChildren() {
        return children;
    }
}
