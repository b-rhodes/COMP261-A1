package Trie;

import java.util.ArrayList;
import java.util.HashMap;

public class TrieNode<T> {

    // The children of this node
    private HashMap<Character, TrieNode<T>> children = new HashMap<Character, TrieNode<T>>();

    // The data held by the node (allows multiple of the same data.
    private ArrayList<T> data = new ArrayList<T>();

    // Whether or not this node actually holds data
    private boolean holdsData = false;

    // The prefix up until here (including this node)
    private String prefix;

    /**
     * Creates the node, data is not required,
     * although the alternate constructor allows for data to be entered at the same time
     *
     * @param prefix - The prefix up until here (including this node)
     */
    public TrieNode(String prefix) {
        this.prefix = prefix;
    }

    /**
     * Creates the node while adding data at the same time.
     * The data will not always be stored in this node, it may be stored in the branches which
     * this node is the root of.
     *
     * @param prefix - The prefix up until here (including this node)
     * @param data - The data that this node is being added to organise
     */
    public TrieNode(String prefix, T data) {
        this.prefix = prefix;
        this.add(data);
    }

    //todo: add method which checks against prefix and adds.



    //  ------------------------------------------------------------------------------------------------
    //  THE GETTERS AND SETTERS WERE AUTO GENERATED BY INTELLIJ, I HAVE ONLY ADDED THE METHOD COMMENTS.
    //  ------------------------------------------------------------------------------------------------

    /**
     * @return The ArrayList containing the data
     */
    public ArrayList<T> getData() {
        return data;
    }

    /**
     * @return Whether or not the TrieNode contains data
     */
    public boolean isHoldsData() {
        return holdsData;
    }

    /**
     * @return The prefix of the TrieNode, including the character this node represents
     */
    public String getPrefix() {
        return prefix;
    }
}
